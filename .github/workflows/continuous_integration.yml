name: continuous integration
# execute on push and pull request on the main branch
on: 
  push: 
    branches: 
      - main
  pull_request: 
    branches: 
      - main
# run multiple jobs (in sequence)
jobs:
  # # check type checker
  # run-type-checker: 
  #   name: type checking
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check out code
  #     uses: actions/checkout@v4
  #   - run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install .
  #   - name: Check with Pyright
  #     uses: jakebailey/pyright-action@v2
  #     with: 
  #       working-directory: 'sketchyopts'
  # # run pre-defined tests (on full codebase)
  # run-tests: 
  #   name: testing
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check out code
  #     uses: actions/checkout@v4
  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: '3.x'
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install .
  #   - name: Test with pytest
  #     run: |
  #       python -m pip install pytest pytest-cov
  #       python -m pytest --cov=sketchyopts --cov-report=term-missing --junitxml=pytest.xml tests/ | tee pytest-coverage.txt
  #   - name: Summarize test results
  #     id: action_test
  #     uses: MishaKav/pytest-coverage-comment@main
  #     with:
  #       pytest-coverage-path: pytest-coverage.txt
  #       junitxml-path: pytest.xml
  #       hide-comment: true
  #   - name: Output results to job summary
  #     run: |
  #       echo '- Total coverage: ${{ steps.action_test.outputs.coverage }}' >> $GITHUB_STEP_SUMMARY
  #       echo '- Total number of tests: ${{ steps.action_test.outputs.tests }}' >> $GITHUB_STEP_SUMMARY
  #       echo '- Total number of skipped tests: ${{ steps.action_test.outputs.skipped }}' >> $GITHUB_STEP_SUMMARY
  #       echo '- Total number of failed tests: ${{ steps.action_test.outputs.failures }}' >> $GITHUB_STEP_SUMMARY
  #       echo '- Total number of errored tests: ${{ steps.action_test.outputs.errors }}' >> $GITHUB_STEP_SUMMARY
  #       echo '- Total time (seconds) used: ${{ steps.action_test.outputs.time }}' >> $GITHUB_STEP_SUMMARY
  #       echo '' >> $GITHUB_STEP_SUMMARY
  #       echo 'Detailed Report:' >> $GITHUB_STEP_SUMMARY
  #       echo '${{ steps.action_test.outputs.coverageHtml }}' | sed -E 's/(.*?)summary>//' | sed 's/<\/details>$//' >> $GITHUB_STEP_SUMMARY
  # format (changed) code using black
  format-code:
    name: linting
    # needs: # run linter only after tests are passed
    #   - run-type-checker
    #   - run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # - name: Get changed files
      #   id: action_changed_files
      #   uses: tj-actions/changed-files@v42
      #   with:
      #     files: |
      #       **.py
      - name: Check files using the black formatter
        # if: steps.action_changed_files.outputs.all_changed_files
        uses: psf/black@stable
        id: black
        with:
          options: ""
          # src: "${{ steps.action_changed_files.outputs.all_changed_files }}"
      - name: Determine if any file gets formatted
        id: is_formatted
        run: |
          echo '${{ steps.black.outputs[*][-1] }}'
          '${{ steps.black.outputs[*][-1] }}' =~ '\s?[0-9]+\sfiles?\sreformatted(\.|,)\s?'
      - name: Create Pull Request
        # if: (steps.action_changed_files.outputs.all_changed_files && steps.is_formatted.outputs == 'true')
        if: (steps.is_formatted.outputs == 'true')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "[GiHub Actions] Format Python code with Black"
          commit-message: "Format Python code with Black"
          body: |
            There appear to be some python formatting errors in ${{ github.sha }}. This automatically generated pull request
            uses the [Black](https://github.com/psf/black) formatter to fix these issues.
          base: ${{ github.head_ref }} # Creates pull request onto pull request or commit branch
          branch: actions/black
  # build documentation
  # pages:
  #   name: docs generation
  #   needs: # build docs only after tests are passed
  #     - run-type-checker
  #     - run-tests
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   permissions:
  #     pages: write
  #     id-token: write
  #   steps:
  #   - name: Build and deploy documentation. 
  #     id: deployment
  #     uses: sphinx-notes/pages@v3
