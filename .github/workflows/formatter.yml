name: continuous integration
# execute on push and pull request on the main branch
on: 
  push: 
    branches: 
      - main
  pull_request: 
    branches: 
      - main
# run multiple jobs (in sequence)
jobs:
  # check type checker
  run-type-checker: 
    name: type checking
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Check with Pyright
      uses: jakebailey/pyright-action@v2
  # run pre-defined tests (on full codebase)
  run-tests: 
    name: testing
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r ./tests/requirements.txt
    - name: Test with pytest
      run: |
        python -m pip install pytest pytest-cov
        python -m pytest --cov=sketchyopts --cov-config=tests/.coveragerc --cov-report term-missing tests/
  # format (changed) code using black
  format-code:
    name: linting
    needs: # run linter only after tests are passed
      - run-type-checker
      - run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            **.py
      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
          done
      - name: Check files using the black formatter
        uses: rickstaa/action-black@v1
        id: action_black
        with:
          black_args: "${{ steps.changed-files.outputs.all_changed_files }}"
      - name: Create Pull Request
        if: steps.action_black.outputs.is_formatted == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "[GiHub Actions] Format Python code with Black"
          commit-message: "Format Python code with Black"
          body: |
            There appear to be some python formatting errors in ${{ github.sha }}. This automatically generated pull request
            uses the [Black](https://github.com/psf/black) formatter to fix these issues.
          base: ${{ github.head_ref }} # Creates pull request onto pull request or commit branch
          branch: actions/black
